/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package projectconquest.mapeditor;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.json.Json;
import javax.json.JsonArray;
import javax.json.JsonObject;
import javax.json.JsonReader;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileFilter;
import projectconquest.data.Image;
import projectconquest.data.TileLayer;
import projectconquest.data.TileSet;
import projectconquest.data.java.JavaImage;
import projectconquest.data.map.Location;
import projectconquest.data.map.Map;
import projectconquest.data.map.Route;

/**
 *
 * @author Andrea
 */
@SuppressWarnings("serial")
public class MapEditorUI extends javax.swing.JFrame {
    
    
    private static final int TOOL_LOCATION = 0;
    private static final int TOOL_ROUTE = 1;
    
    private int selectedTool;
    
    private Location selectedLocation, draggedLocation;   
    
    private Map map;
    
    FileFilter mapFiles = new FileFilter() {
            @Override
            public boolean accept(File file) {
                if(file.isDirectory() || file.getName().endsWith(".pcm"))
                    return true;
                else
                    return false;
            }     

            @Override
            public String getDescription() {
                return "Project Conqest Game Map (.pcm)";
            }
        };
    
    FileFilter pngFiles = new FileFilter() {
            @Override
            public boolean accept(File file) {
                if(file.isDirectory() || file.getName().endsWith(".png"))
                    return true;
                else
                    return false;
            }     

            @Override
            public String getDescription() {
                return "PNG Images (.png)";
            }
        };
    
    
    FileFilter jsonFiles = new FileFilter() {
            @Override
            public boolean accept(File file) {
                if(file.isDirectory() || file.getName().endsWith(".json"))
                    return true;
                else
                    return false;
            }     

            @Override
            public String getDescription() {
                return "JSON Object (.json)";
            }
        };    

    /**
     * Creates new form MapEditorUI
     */
    public MapEditorUI() {
        initComponents();
        
        
        map = new Map(8, 8);
               
        editPanel.setMap(map);
        editPanel.invalidate();
        editPanel.repaint();    
        
    }
    
    private Location getLocationAt(float x, float y) {
        
        
        for(Location l : map.getLocations()) {
            
            if(Math.abs(x - l.getX()) < MapPanel.LOCATION_RADIUS / MapPanel.TILE_SIZE
            && Math.abs(y - l.getY()) < MapPanel.LOCATION_RADIUS / MapPanel.TILE_SIZE)
                return l;
            
        }
        
        return null;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngrpTools = new javax.swing.ButtonGroup();
        fileChooser = new javax.swing.JFileChooser();
        dlgNewMap = new javax.swing.JDialog();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        cmdUndo = new javax.swing.JButton();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        txtWidth = new javax.swing.JTextField();
        txtHeight = new javax.swing.JTextField();
        cmdOk = new javax.swing.JButton();
        dlgMapProperties = new javax.swing.JDialog();
        cmdMapPropertiesClose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        editPanel = new projectconquest.mapeditor.MapPanel();
        menuBar = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuFileNew = new javax.swing.JMenuItem();
        mnuFileOpen = new javax.swing.JMenuItem();
        mnuFileSave = new javax.swing.JMenuItem();
        javax.swing.JPopupMenu.Separator jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mnuProperties = new javax.swing.JMenuItem();
        mnuImportJSON = new javax.swing.JMenuItem();
        javax.swing.JPopupMenu.Separator jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnuFileExit = new javax.swing.JMenuItem();
        mnuEdit = new javax.swing.JMenu();
        mnuEditDeleteLocation = new javax.swing.JMenuItem();
        mnuEditDeleteRoutesToLocation = new javax.swing.JMenuItem();
        mnuTools = new javax.swing.JMenu();
        mnuLocationTool = new javax.swing.JRadioButtonMenuItem();
        mnuRouteTool = new javax.swing.JRadioButtonMenuItem();

        dlgNewMap.setTitle("New Map");
        dlgNewMap.setBackground(java.awt.Color.white);
        dlgNewMap.setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        dlgNewMap.setModal(true);
        dlgNewMap.setResizable(false);

        jLabel2.setText("Width");

        cmdUndo.setText("Undo");
        cmdUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUndoActionPerformed(evt);
            }
        });

        jLabel5.setText("Height");

        txtWidth.setText("8");

        txtHeight.setText("8");

        cmdOk.setText("Ok");
        cmdOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dlgNewMapLayout = new javax.swing.GroupLayout(dlgNewMap.getContentPane());
        dlgNewMap.getContentPane().setLayout(dlgNewMapLayout);
        dlgNewMapLayout.setHorizontalGroup(
            dlgNewMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgNewMapLayout.createSequentialGroup()
                .addGroup(dlgNewMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dlgNewMapLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dlgNewMapLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cmdOk, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdUndo)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        dlgNewMapLayout.setVerticalGroup(
            dlgNewMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgNewMapLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dlgNewMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(dlgNewMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdUndo)
                    .addComponent(cmdOk))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dlgMapProperties.setTitle("Map Properties");
        dlgMapProperties.setModal(true);
        dlgMapProperties.setResizable(false);

        cmdMapPropertiesClose.setText("Close");
        cmdMapPropertiesClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdMapPropertiesCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dlgMapPropertiesLayout = new javax.swing.GroupLayout(dlgMapProperties.getContentPane());
        dlgMapProperties.getContentPane().setLayout(dlgMapPropertiesLayout);
        dlgMapPropertiesLayout.setHorizontalGroup(
            dlgMapPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgMapPropertiesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmdMapPropertiesClose)
                .addContainerGap(382, Short.MAX_VALUE))
        );
        dlgMapPropertiesLayout.setVerticalGroup(
            dlgMapPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgMapPropertiesLayout.createSequentialGroup()
                .addGap(289, 289, 289)
                .addComponent(cmdMapPropertiesClose)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        editPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                editPanelMouseReleased(evt);
            }
        });
        editPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                editPanelMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout editPanelLayout = new javax.swing.GroupLayout(editPanel);
        editPanel.setLayout(editPanelLayout);
        editPanelLayout.setHorizontalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 884, Short.MAX_VALUE)
        );
        editPanelLayout.setVerticalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 564, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(editPanel);

        mnuFile.setText("File");

        mnuFileNew.setText("New");
        mnuFileNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFileNewActionPerformed(evt);
            }
        });
        mnuFile.add(mnuFileNew);

        mnuFileOpen.setText("Open");
        mnuFileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFileOpenActionPerformed(evt);
            }
        });
        mnuFile.add(mnuFileOpen);

        mnuFileSave.setText("Save");
        mnuFileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFileSaveActionPerformed(evt);
            }
        });
        mnuFile.add(mnuFileSave);
        mnuFile.add(jSeparator2);

        mnuProperties.setText("Properties");
        mnuProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPropertiesActionPerformed(evt);
            }
        });
        mnuFile.add(mnuProperties);

        mnuImportJSON.setText("Import from JSON...");
        mnuImportJSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuImportJSONActionPerformed(evt);
            }
        });
        mnuFile.add(mnuImportJSON);
        mnuFile.add(jSeparator1);

        mnuFileExit.setText("Exit");
        mnuFileExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFileExitActionPerformed(evt);
            }
        });
        mnuFile.add(mnuFileExit);

        menuBar.add(mnuFile);

        mnuEdit.setText("Edit");

        mnuEditDeleteLocation.setText("Delete Location");
        mnuEditDeleteLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuEditDeleteLocationActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuEditDeleteLocation);

        mnuEditDeleteRoutesToLocation.setText("Delete routes to location");
        mnuEditDeleteRoutesToLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuEditDeleteRoutesToLocationActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuEditDeleteRoutesToLocation);

        menuBar.add(mnuEdit);

        mnuTools.setText("Tools");

        btngrpTools.add(mnuLocationTool);
        mnuLocationTool.setSelected(true);
        mnuLocationTool.setText("Location");
        mnuLocationTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLocationToolActionPerformed(evt);
            }
        });
        mnuTools.add(mnuLocationTool);

        btngrpTools.add(mnuRouteTool);
        mnuRouteTool.setText("Route");
        mnuRouteTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRouteToolActionPerformed(evt);
            }
        });
        mnuTools.add(mnuRouteTool);

        menuBar.add(mnuTools);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuLocationToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLocationToolActionPerformed
        selectedTool = TOOL_LOCATION;
    }//GEN-LAST:event_mnuLocationToolActionPerformed

    private void mnuRouteToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRouteToolActionPerformed
        selectedTool = TOOL_ROUTE;
    }//GEN-LAST:event_mnuRouteToolActionPerformed

    private void editPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editPanelMouseReleased
        // TODO add your handling code here:
        
        float x = evt.getX() / (float) MapPanel.TILE_SIZE;
        float y = evt.getY() / (float) MapPanel.TILE_SIZE;
       
        Location clickedLocation = getLocationAt(x, y);
        
        draggedLocation = null;

        switch(selectedTool) {
            case TOOL_LOCATION:
                
                if(clickedLocation != null) {
                    if(selectedLocation == null)
                        selectedLocation = clickedLocation;
                    else {
                        if(selectedLocation.equals(clickedLocation))
                            selectedLocation = null;
                        else
                            selectedLocation = clickedLocation;
                    }
                    break;
                } else {
                
                    map.addLocation(new Location(x, y));
                }
                break;
            case TOOL_ROUTE:
                if(clickedLocation == null)
                    break;
              
                if(selectedLocation == null) {
                    selectedLocation = clickedLocation;
                }    
                else {
                    if(!selectedLocation.equals(clickedLocation)) {
                        map.addRoute(new Route(selectedLocation, clickedLocation));

                        selectedLocation = null;
                    } else {
                        selectedLocation = null;
                    }
                }
                
            default:
                break;
        }        
        
        editPanel.setHightlightLocation(selectedLocation);
        
        if(selectedLocation != null) {
   
        }

        editPanel.invalidate();
        editPanel.repaint();            
    }//GEN-LAST:event_editPanelMouseReleased

    private void editPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editPanelMouseDragged
        // TODO add your handling code here:
        float x = evt.getX() / (float) MapPanel.TILE_SIZE;
        float y = evt.getY() / (float) MapPanel.TILE_SIZE;
        
        Location clickedLocation = getLocationAt(x, y);
        
        if(draggedLocation == null)
            draggedLocation = clickedLocation;     

        if(draggedLocation != null) {
            
            draggedLocation.setPosition(x, y);
            

            editPanel.invalidate();
            editPanel.repaint();   
        }
    }//GEN-LAST:event_editPanelMouseDragged

    private void mnuEditDeleteLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuEditDeleteLocationActionPerformed
        // TODO add your handling code here:
        if(selectedLocation != null) {
           
            map.removeLocation(selectedLocation);
            
            selectedLocation = null;

            editPanel.invalidate();
            editPanel.repaint();               
        }
    }//GEN-LAST:event_mnuEditDeleteLocationActionPerformed

    private void mnuEditDeleteRoutesToLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuEditDeleteRoutesToLocationActionPerformed
        // TODO add your handling code here:
        if(selectedLocation != null) {
            map.deleteRoutesToLocation(selectedLocation);
            
            editPanel.invalidate();
            editPanel.repaint();              
        }
    }//GEN-LAST:event_mnuEditDeleteRoutesToLocationActionPerformed

    private void mnuFileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFileOpenActionPerformed
        // TODO add your handling code here:
        fileChooser.setFileFilter(mapFiles);
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                ObjectInputStream in = new ObjectInputStream(new FileInputStream(fileChooser.getSelectedFile()));
                map = (Map) in.readObject();
                editPanel.setMap(map);
                editPanel.invalidate();
                editPanel.repaint();
                in.close();
            }
            catch(Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_mnuFileOpenActionPerformed

    private void mnuFileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFileSaveActionPerformed
        // TODO add your handling code here:
        fileChooser.setFileFilter(mapFiles);
        if(fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                map.setName(fileChooser.getSelectedFile().getName());
                ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(fileChooser.getSelectedFile()));
                out.writeObject(map);
                out.close();
            }
            catch(Exception ex) {
                ex.printStackTrace();
            }
        }        
    }//GEN-LAST:event_mnuFileSaveActionPerformed

    private void mnuFileNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFileNewActionPerformed
        // TODO add your handling code here:
        dlgNewMap.pack();
        dlgNewMap.setLocationRelativeTo(this);
        dlgNewMap.setVisible(true);
        
    }//GEN-LAST:event_mnuFileNewActionPerformed

    private void cmdOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOkActionPerformed

        try {
            int width = Integer.parseInt(txtWidth.getText());
            int height = Integer.parseInt(txtHeight.getText());

            map = new Map(width, height, 2);
            
            dlgNewMap.setVisible(false);
            
            editPanel.setMap(map);
            
        }
        catch(NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Number format exception", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_cmdOkActionPerformed

    private void cmdUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUndoActionPerformed
        // TODO add your handling code here:
        dlgNewMap.setVisible(false);
    }//GEN-LAST:event_cmdUndoActionPerformed

    private void mnuPropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPropertiesActionPerformed
        // TODO add your handling code here:
        dlgMapProperties.pack();
        dlgMapProperties.setLocationRelativeTo(this);
        dlgMapProperties.setVisible(true);
    }//GEN-LAST:event_mnuPropertiesActionPerformed

    private void cmdMapPropertiesCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdMapPropertiesCloseActionPerformed
        // TODO add your handling code here:
        dlgMapProperties.setVisible(false);
    }//GEN-LAST:event_cmdMapPropertiesCloseActionPerformed

    private void mnuFileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFileExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_mnuFileExitActionPerformed

    private void mnuImportJSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuImportJSONActionPerformed
        // TODO add your handling code here:
        
        fileChooser.setFileFilter(jsonFiles);
        
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                File file = fileChooser.getSelectedFile();
                JsonReader rd = Json.createReader(new FileInputStream(file));
                JsonObject obj = rd.readObject();
                
                int width = obj.getInt("width");
                int height = obj.getInt("height");
                
                if(width != map.getWidth() || height != map.getHeight())
                    throw new IllegalArgumentException("The current map does not match the size of the JSON file");
                
                int tileWidth = obj.getInt("tilewidth");
                int tileHeight = obj.getInt("tileheight");
                
                if(tileWidth != tileHeight)
                    throw new IllegalArgumentException("Tiles must be squared. Found: " + tileWidth + " x " + tileHeight + "px");
                
                TileSet newTileSet = new TileSet(tileWidth);
                
                /* TILE SET */
                JsonArray tileSets = obj.getJsonArray("tilesets");     
                for(JsonObject t : tileSets.getValuesAs(JsonObject.class)) {
                    if(t.getInt("tilewidth") != tileWidth || t.getInt("tileheight") != tileHeight)
                        throw new IllegalArgumentException("Tileset has wrong tile size");
                    
                    int firstIndex = t.getInt("firstgid");
                    String imageFile = t.getString("image");
                    
                    newTileSet.addTiles(JavaImage.loadFromFile(new File(file.getParentFile(), imageFile)), firstIndex);
                }
                map.setTileSet(newTileSet);
                
                /* LAYERS */
                
                JsonArray layers = obj.getJsonArray("layers");     
                for(JsonObject l : layers.getValuesAs(JsonObject.class)) {
                    if(l.getString("type").equals("tilelayer")) {
                        
                        JsonArray tilesArray = l.getJsonArray("data");
                        
                        int[] tiles = new int[tilesArray.size()];
                        
                        for(int i = 0; i < tiles.length; i++)
                            tiles[i] = tilesArray.getInt(i);
                        
                        TileLayer layer = new TileLayer(width, height, tileWidth);
                        layer.setTiles(tiles);
                        
                        map.addTileLayer(layer);
                    }
                }
                
                
                String message = "JSON file imported\n" +
                        "Map size: " + width + " x " + height + "\n" +
                        "Tile size: " + tileWidth + " x " + tileHeight + " px\n";
                
                
                
                rd.close();
                
                JOptionPane.showMessageDialog(this, message, "Information", JOptionPane.INFORMATION_MESSAGE);
                
                editPanel.setMap(map);
                
            }
            catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(dlgMapProperties, ex.getMessage(), "File Not Found Exception", JOptionPane.ERROR_MESSAGE);
            }
            catch(IOException ex2) {
                JOptionPane.showMessageDialog(dlgMapProperties, ex2.getMessage(), "IO Exception", JOptionPane.ERROR_MESSAGE);
            } 
            catch(IllegalArgumentException ex3) {
                JOptionPane.showMessageDialog(dlgMapProperties, ex3.getMessage(), "Illegal Argument Exception", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_mnuImportJSONActionPerformed


    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MapEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MapEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MapEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MapEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(MapEditorUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(MapEditorUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(MapEditorUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(MapEditorUI.class.getName()).log(Level.SEVERE, null, ex);
                }

                new MapEditorUI().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btngrpTools;
    private javax.swing.JButton cmdMapPropertiesClose;
    private javax.swing.JButton cmdOk;
    private javax.swing.JButton cmdUndo;
    private javax.swing.JDialog dlgMapProperties;
    private javax.swing.JDialog dlgNewMap;
    private projectconquest.mapeditor.MapPanel editPanel;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu mnuEdit;
    private javax.swing.JMenuItem mnuEditDeleteLocation;
    private javax.swing.JMenuItem mnuEditDeleteRoutesToLocation;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenuItem mnuFileExit;
    private javax.swing.JMenuItem mnuFileNew;
    private javax.swing.JMenuItem mnuFileOpen;
    private javax.swing.JMenuItem mnuFileSave;
    private javax.swing.JMenuItem mnuImportJSON;
    private javax.swing.JRadioButtonMenuItem mnuLocationTool;
    private javax.swing.JMenuItem mnuProperties;
    private javax.swing.JRadioButtonMenuItem mnuRouteTool;
    private javax.swing.JMenu mnuTools;
    private javax.swing.JTextField txtHeight;
    private javax.swing.JTextField txtWidth;
    // End of variables declaration//GEN-END:variables


}
