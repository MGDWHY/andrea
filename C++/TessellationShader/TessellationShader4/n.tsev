#version 420

layout(triangles, fractional_odd_spacing, ccw) in;

uniform mat4 in_ProjectionMatrix;

in vec3 tcsNormal[];

smooth out vec3 tesPosition;
smooth out vec3 tesNormal;

void main() {
	
	vec3 p1 = gl_in[0].gl_Position.xyz;
	vec3 p2 = gl_in[1].gl_Position.xyz;
	vec3 p3 = gl_in[2].gl_Position.xyz;
	
	vec3 n1 = tcsNormal[0];
	vec3 n2 = tcsNormal[1];
	vec3 n3 = tcsNormal[2];
	
	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;
	float w = gl_TessCoord.z;	
	
	vec3 faceNormal = normalize(cross(p2 - p1, p3 - p2));
	
	vec3 planarPosition = p1 * u + p2 * v + p3 * w;
	
	float d1 = length(planarPosition - p1);
	float d2 = length(planarPosition - p2);
	float d3 = length(planarPosition - p3);
	
	vec3 normal = normalize(u * n1 + v * n2 + w * n3);
	vec3 displace = (u * d1 * n1 + v * d2 * n2 + w * d3 * n3) / (d1 + d2 + d3);
	vec3 position = planarPosition + displace;
	
	tesNormal = normal;
	tesPosition = position;
	gl_Position = in_ProjectionMatrix * vec4(position, 1.0);
}