#version 420

layout(triangles, fractional_odd_spacing, ccw) in;

uniform mat4 in_ProjectionMatrix;

in vec3 tcsNormal[];

smooth out vec3 tesPosition;
smooth out vec3 tesNormal;

void main() {
	
	vec3 p1 = gl_in[0].gl_Position.xyz;
	vec3 p2 = gl_in[1].gl_Position.xyz;
	vec3 p3 = gl_in[2].gl_Position.xyz;
	
	vec3 n1 = tcsNormal[0];
	vec3 n2 = tcsNormal[1];
	vec3 n3 = tcsNormal[2];
	
	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;
	float w = gl_TessCoord.z;
	
	vec3 linearPosition = u * p1 + v * p2 + w * p3;
	
	vec3 pp1 = linearPosition - n1 * dot(linearPosition - p1, n1);
	vec3 pp2 = linearPosition - n2 * dot(linearPosition - p2, n2);
	vec3 pp3 = linearPosition - n3 * dot(linearPosition - p3, n3);
	
	vec3 position = pp1 * u + pp2 * v + pp3 * w;
	
	tesPosition = position;
	tesNormal = normalize(u * n1 + v * n2 + w * n3);
	
	gl_Position = in_ProjectionMatrix * vec4(position, 1.0);
	
}